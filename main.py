import os
from typing import List, Dict
from src.file_readers import read_csv_file, read_excel_file
from src.utils import read_json_file
from src.search import search_transactions
from src.category_counter import count_transaction_categories
from src.processing import sort_by_date

DATA_PATH = "data"  # –ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏


def load_transactions(file_type: str) -> List[Dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞.
    :param file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ ("json", "csv", "xlsx").
    :return: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    """
    file_map = {
        "json": "operations.json",
        "csv": "transactions.csv",
        "xlsx": "transactions_excel.xlsx"
    }

    file_path = file_map[file_type]

    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {file_path}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    if file_type == "json":
        return read_json_file(file_path)
    elif file_type == "csv":
        return read_csv_file(file_path)
    elif file_type == "xlsx":
        return read_excel_file(file_path)


def get_filtered_status(transactions: List[Dict]) -> List[Dict]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    :param transactions: —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    :return: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    valid_statuses = {"EXECUTED", "CANCELED", "PENDING"}

    while True:
        status = input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (EXECUTED, CANCELED, PENDING): ").strip().upper()
        if status in valid_statuses:
            filtered_transactions = [txn for txn in transactions if str(txn.get("state", "")).upper() == status]
            print(f"–û–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É '{status}'.")
            print(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return filtered_transactions
        else:
            print(f"–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å '{status}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """
    print("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.")

    while True:
        print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:")
        print("1. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞")
        print("2. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ CSV-—Ñ–∞–π–ª–∞")
        print("3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ XLSX-—Ñ–∞–π–ª–∞")
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞: ").strip()
        if choice in {"1", "2", "3"}:
            file_type = {"1": "json", "2": "csv", "3": "xlsx"}[choice]
            print(f"–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω {file_type.upper()}-—Ñ–∞–π–ª.")
            break
        print("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")

    transactions = load_transactions(file_type)
    print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    for txn in transactions[:5]:
        print(txn)

    if not transactions:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    transactions = get_filtered_status(transactions)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    if input("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ? –î–∞/–ù–µ—Ç: ").strip().lower() == "–¥–∞":
        order = input("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏–ª–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é? ").strip().lower() == "–ø–æ —É–±—ã–≤–∞–Ω–∏—é"
        transactions = sort_by_date(transactions, order)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–µ
    if input("–í—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É–±–ª–µ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏? –î–∞/–ù–µ—Ç: ").strip().lower() == "–¥–∞":
        transactions = [txn for txn in transactions if txn.get("currency", "").upper() == "RUB"]
    print(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–∞–ª—é—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    if input("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å–ª–æ–≤—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏? –î–∞/–ù–µ—Ç: ").strip().lower() == "–¥–∞":
        keyword = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ").strip()
        transactions = search_transactions(transactions, keyword)

    # –í—ã–≤–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    print("\n–†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—é –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    if transactions:
        print(f"\n–í—Å–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –≤—ã–±–æ—Ä–∫–µ: {len(transactions)}")
        for txn in transactions:
            print(
                f"{txn.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {txn.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            print(f"–°—É–º–º–∞: {txn.get('amount', '–ù–µ—Ç —Å—É–º–º—ã')} {txn.get('currency', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–æ–¥ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")

    # –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_counts = count_transaction_categories(transactions)
    print("\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    for category, count in category_counts.items():
        print(f"{category}: {count}")


if __name__ == "__main__":
    main()
